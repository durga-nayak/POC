/**
 * 
 */
package com.algo.analysis.devideconquer;

import java.util.Arrays;

/**
 * @author NAYAKDUR
 *
 */
public class BinaryMultiplication {
	
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BinaryMultiplication binaryMultiplication = new BinaryMultiplication();
		String val  = "4";
		Integer intVal =  Integer.parseInt(val);
		BinaryConversion binaryConversion = new BinaryConversion(intVal);
//		for (int i = 0; i < binaryConversion.getBinaryVal().length; i++) {
//			System.out.print(binaryConversion.getBinaryVal()[i]);
//		}
		binaryMultiplication.multiply(binaryConversion.getBinaryVal(), binaryConversion.getBinaryVal());
	}
	public int multiply (int[] first, int[] two ) {
		
		int n = first.length > two.length ? first.length : two.length;
		if (n == 1) {
			System.out.println("***"+first[0]*two[0]);
			return first[0]*two[0];
		}
		int mid = first.length/2;
		int firstLeft[] = Arrays.copyOfRange(first, 0, mid);
		int firstRight[] = Arrays.copyOfRange(first, mid, two.length - mid);
		
		int midtwo = two.length/2;
		int twoLeft[] = Arrays.copyOfRange(first, 0, mid);
		int twoRight[] = Arrays.copyOfRange(first, mid, two.length - mid);
		
		int p1= multiply(firstLeft, twoLeft);
		int p2= multiply(firstRight, twoRight);
		System.out.println(p1+""+p2);
//		 int p3 = multiply(firstLeft + firstRight, twoLeft + twoRight);
		return p1 + p2;
		
	}
	
}
