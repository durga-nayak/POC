/**
 * 
 */
package poc.algo.ds.contiguous.queue;

import poc.algo.ds.PriorityQueue;

/**
 * @author NAYAKDUR
 *
 */
public class PriorityQueueImpl<E> extends QueueImpl<E> implements PriorityQueue<E>{

	Integer indexOfMinimum;
	
	@Override
	public boolean insert(E e) {
		int index = e.hashCode();
		this.items[index] = e;
		if (indexOfMinimum == null) {
			this.indexOfMinimum = index;
		} else if (this.compareTo(this.items[index], this.items[indexOfMinimum]) == -1){
			this.indexOfMinimum = index;
		}
		
		return true;
	}

	@Override
	public E findMinimum() {
		// TODO Auto-generated method stub
//		System.out.println(indexOfMinimum);
		return (E) this.items[indexOfMinimum];
	}

	@Override
	public E findMaximum() {
		// TODO Auto-generated method stub
		return null;
	}

	public int compareTo(Object o1, Object o2) {
		return ((Comparable<? super E>)o1).compareTo((E) o2);
	}
	
	@Override
	public E deleteMinimum() {
		Object o1 =  this.items[indexOfMinimum];
		this.items[indexOfMinimum] = null;
		System.out.println("as"+o1);
		for (int i = 0; i < items.length; i++) {
			Object item = this.items[i];
			if (indexOfMinimum != i && item!= null && this.compareTo(o1, item) == -1){
				this.indexOfMinimum = i;
			} 
		}
		System.out.println("indexOfMinimum::"+indexOfMinimum);
		return (E)o1;
	}

	@Override
	public E deleteMaximum() {
		// TODO Auto-generated method stub
		return null;
	}
	
	

}
