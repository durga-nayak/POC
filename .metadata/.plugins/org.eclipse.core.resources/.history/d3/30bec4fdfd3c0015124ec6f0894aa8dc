/**
 * 
 */
package poc.algo.sort;

/**
 * @author NAYAKDUR
 *
 */
public class MergeSort {

	/**
	 * 
	 */
	public MergeSort() {
		// TODO Auto-generated constructor stub
	}

	public <T> int compareTo(Object o1, Object o2) {
		return ((Comparable<? super T>)o1).compareTo((T) o2);
	}
	
	public <T> T[] mergeSort (T[] items, int low, int high) {
		//0,1,2,3,4,5
		if (low == high) {
			return null;
		}
		int mid =   low + (high - low) / 2;		
//		System.out.println(low+""+mid+""+high);
		mergeSort(items, low, mid);
		mergeSort(items, mid+1, high);
		
		
		T[] tempItems = (T[])new Object[high - low +1];
		int count = 0;
		int lowIndex = low;
		for (int i = low ; i <= high; i++) {
			tempItems[count] = items[lowIndex];
			System.out.print(tempItems[count]+",");
			lowIndex++;
			count++;
			
		}
		System.out.println(""+tempItems.length);
		
		int i = low;
		int j = mid + 1;
		int k = low;
		int tempLowIndex = 0;
		int tempMidIndex = mid -low +1;
		
//		while ( i <= mid && j <= high) {
//			
//			if (this.compareTo(tempItems[tempLowIndex],tempItems[tempMidIndex]) == -1) {
//				items[k] = tempItems[tempLowIndex];
//				tempLowIndex++;
//				i++;
//			} else {
//				items[k] = tempItems[tempMidIndex];
//				tempMidIndex++;
//				j++;
//			}
//			k++;
//			
//		}
//		 if ( i < mid) {
//			 while ( i <= mid) {
//				 items[k] = tempItems[tempLowIndex];
//				 tempLowIndex++;
//					i++;
//					k++;
//			 }
//		 }
		//1,2,6 4,5
//		 System.out.println("++++++++++++++++");
//		 for (int n = 0 ; n <= items.length - 1; n++) {
//
//
//				System.out.print(""+items[n]+",");
//				
//				
//			}
//		 System.out.println("++++++++++++++++");
		return items;
		
	}
	public static void main(String[] args) {
		class Employee implements Comparable<Employee>{
			int age;
			int empId;

			@Override
			public String toString() {
				return  empId + ",";
			}

			@Override
			public int compareTo(Employee o) {
				if (this.empId > o.empId){
					return 1;
				}else if (this.empId < o.empId){
					return -1;
				}
				return 0;
			}
		}
		MergeSort mergeSort = new MergeSort();
		Integer[] items = {1,3,2,7,21,25,0,99,32};
		Employee[] employees = new Employee[9];
		for (int i =0; i < items.length; i++) {
			Employee employee = new Employee();
			employee.empId = items[i];
			employees[i] =employee;
		}
		mergeSort.mergeSort(employees, 0, items.length -1);
	}
}
